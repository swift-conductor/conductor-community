plugins {
    id 'org.springframework.boot'
}

ext['snakeyaml.version'] = revSnakeYaml

dependencies {
    implementation "com.swiftconductor:conductor-rest:${revConductor}"
    implementation "com.swiftconductor:conductor-core:${revConductor}"
    implementation "com.swiftconductor:conductor-redis-persistence:${revConductor}"
    implementation "com.swiftconductor:conductor-cassandra-persistence:${revConductor}"
    implementation "com.swiftconductor:conductor-grpc-server:${revConductor}"
    implementation "com.swiftconductor:conductor-redis-lock:${revConductor}"
    implementation "com.swiftconductor:conductor-redis-concurrency-limit:${revConductor}"


    implementation "com.swiftconductor:conductor-http-task:${revConductor}"
    implementation "com.swiftconductor:conductor-json-jq-task:${revConductor}"
    implementation "com.swiftconductor:conductor-awss3-storage:${revConductor}"
    implementation "com.swiftconductor:conductor-awssqs-event-queue:${revConductor}"

    implementation project(':event-queue:conductor-amqp')
    implementation project(':event-queue:conductor-nats')
    implementation project(':index:conductor-es7-persistence')
    implementation project(':external-payload-storage:conductor-azureblob-storage')
    implementation project(':external-payload-storage:conductor-postgres-external-storage')

    implementation project(':lock:conductor-zookeeper-lock')

    implementation project(':conductor-metrics')

    implementation project(':persistence:conductor-common-persistence')
    implementation project(':persistence:conductor-postgres-persistence')
    implementation project(':persistence:conductor-mysql-persistence')

    implementation project(':task:conductor-kafka')

    implementation project(':conductor-workflow-event-listener')

    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.retry:spring-retry'

    implementation 'org.springframework.boot:spring-boot-starter-log4j2'
    implementation 'org.apache.logging.log4j:log4j-web'

    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    implementation "org.springdoc:springdoc-openapi-ui:${revOpenapi}"

    runtimeOnly "org.glassfish.jaxb:jaxb-runtime:${revJAXB}"

    testImplementation "com.swiftconductor:conductor-rest:${revConductor}"
    testImplementation "com.swiftconductor:conductor-common:${revConductor}"
    testImplementation "io.grpc:grpc-testing:${revGrpc}"
    testImplementation "com.google.protobuf:protobuf-java:${revProtoBuf}"
    testImplementation "io.grpc:grpc-protobuf:${revGrpc}"
    testImplementation "io.grpc:grpc-stub:${revGrpc}"
}

jar {
    enabled = true
}

bootJar {
    mainClass = 'com.swiftconductor.Conductor'
    classifier = 'boot'
}

// https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/htmlsingle/#integrating-with-actuator.build-info
// This will configure a BuildInfo task named bootBuildInfo
springBoot {
    buildInfo()
}

compileJava.dependsOn bootBuildInfo